#include <iostream>
#include <string.h>
#include <stdlib.h>
#include <cctype> // for isalpha()
using namespace std;

struct node {
    char data;
    node *left;
    node *right;
};

class tree {
public:
    node *top;
    void expression(char[]);
    void preorder(node *);
    void non_rec_postorder(node *);
    void del(node *);
};

class stack1 {
    node *data[30];
    int top;
public:
    stack1() { top = -1; }

    int empty() { return top == -1; }

    void push(node *p) {
        if (top < 29)
            data[++top] = p;
        else
            cout << "Stack overflow" << endl;
    }

    node *pop() {
        if (!empty())
            return data[top--];
        else {
            cout << "Stack underflow" << endl;
            return NULL;
        }
    }
};

void tree::expression(char prefix[]) {
    stack1 s;
    int len = strlen(prefix);

    for (int i = len - 1; i >= 0; i--) {
        node *newNode = new node;
        newNode->left = newNode->right = NULL;

        if (isalpha(prefix[i])) {
            newNode->data = prefix[i];
            s.push(newNode);
        } else if (prefix[i] == '+' || prefix[i] == '*' || prefix[i] == '-' || prefix[i] == '/') {
            node *left = s.pop();   // First pop → left child
            node *right = s.pop();  // Second pop → right child
            newNode->data = prefix[i];
            newNode->left = left;
            newNode->right = right;
            s.push(newNode);
        }
    }

    top = s.pop();  // Final root of the tree
}



void tree::preorder(node *root) {
    if (root != NULL) {
        cout << root->data;
        preorder(root->left);
        preorder(root->right);
    }
}

void tree::non_rec_postorder(node *top) {
    stack1 s1, s2;
    node *T = top;

    s1.push(T);
    while (!s1.empty()) {
        T = s1.pop();
        s2.push(T);
        if (T->left != NULL)
            s1.push(T->left);
        if (T->right != NULL)
            s1.push(T->right);
    }
    while (!s2.empty()) {
        T = s2.pop();
        cout << T->data;
    }
}

void tree::del(node *node) {
    if (node == NULL)
        return;
    del(node->left);
    del(node->right);
    cout << "Deleting Node data: " << node->data << endl;
    delete node;
}

int main() {
    char expr[20];
    tree t;

    cout << "Enter Prefix Expression: ";
    cin >> expr;

    t.expression(expr);

    cout << "Postorder traversal: ";
    t.non_rec_postorder(t.top);
    cout << endl;

    cout << "\nDo you want to delete? (1/0): ";
    int op;
    cin >> op;
    if (op == 1) {
        t.del(t.top);
    }

    return 0;
}
