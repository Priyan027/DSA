#include <iostream>
#include <list>
#include <vector>
#define TABLE_SIZE 10
using namespace std;

int hashFunction(int key) {
    return key % TABLE_SIZE;
}

class Dictionary {
private:
    vector<list<pair<int, int>>> table;

public:
    Dictionary() : table(TABLE_SIZE) {}

    void insert(int key, int value) {
        int index = hashFunction(key);
        for (auto &entry : table[index]) {
            if (entry.first == key) {
                entry.second = value;
                return;
            }
        }
        table[index].push_back({key, value});
    }

    int find(int key) {
        int index = hashFunction(key);
        for (auto &entry : table[index]) {
            if (entry.first == key)
                return entry.second;
        }
        return -1;
    }

    void remove(int key) {
        int index = hashFunction(key);
        table[index].remove_if([key](const pair<int, int> &entry) {
            return entry.first == key;
        });
    }

    void display() {
        for (int i = 0; i < TABLE_SIZE; i++) {
            cout << "Index " << i << ": ";
            for (auto &entry : table[i]) {
                cout << "(" << entry.first << ", " << entry.second << ") ";
            }
            cout << endl;
        }
    }
};

int main() {
    Dictionary dict;
    int choice, key, value;

    while (true) {
        cout << "\nDictionary Operations:\n";
        cout << "1. Insert\n2. Find\n3. Delete\n4. Display\n5. Exit\nEnter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter key and value: ";
                cin >> key >> value;
                dict.insert(key, value);
                break;
            case 2:
                cout << "Enter key to find: ";
                cin >> key;
                value = dict.find(key);
                if (value != -1)
                    cout << "Value: " << value << endl;
                else
                    cout << "Key not found." << endl;
                break;
            case 3:
                cout << "Enter key to delete: ";
                cin >> key;
                dict.remove(key);
                cout << "Key deleted if it existed." << endl;
                break;
            case 4:
                dict.display();
                break;
            case 5:
                cout << "Exiting program." << endl;
                return 0;
            default:
                cout << "Invalid choice. Try again." << endl;
        }
    }
}
