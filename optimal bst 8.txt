#include <iostream>
#include <vector>
#include <climits>
#include <iomanip>

using namespace std;

int optimalBST(const vector<int>& keys, const vector<int>& prob, int n, vector<vector<int>>& root) {
    vector<vector<int>> dp(n, vector<int>(n, 0));
    vector<vector<int>> sum(n, vector<int>(n, 0));

    for (int i = 0; i < n; ++i) {
        sum[i][i] = prob[i];
        for (int j = i + 1; j < n; ++j) {
            sum[i][j] = sum[i][j - 1] + prob[j];
        }
    }

    for (int len = 1; len <= n; ++len) {
        for (int i = 0; i <= n - len; ++i) {
            int j = i + len - 1;
            if (len == 1) {
                dp[i][j] = prob[i];
                root[i][j] = i;
            } else {
                dp[i][j] = INT_MAX;
                for (int r = i; r <= j; ++r) {
                    int cost = (r > i ? dp[i][r - 1] : 0) + 
                               (r < j ? dp[r + 1][j] : 0) + 
                               sum[i][j];
                    if (cost < dp[i][j]) {
                        dp[i][j] = cost;
                        root[i][j] = r;
                    }
                }
            }
        }
    }

    return dp[0][n - 1];
}

void printBSTBox(const vector<int>& keys, const vector<vector<int>>& root, int i, int j, vector<vector<string>>& treeStructure) {
    if (i > j) {
        return;
    }
    int r = root[i][j];
    string node = to_string(keys[r]);

    string leftChild = (r > i) ? to_string(keys[root[i][r - 1]]) : "-";
    string rightChild = (r < j) ? to_string(keys[root[r + 1][j]]) : "-";

    treeStructure.push_back({node, leftChild, rightChild});

    printBSTBox(keys, root, i, r - 1, treeStructure);
    printBSTBox(keys, root, r + 1, j, treeStructure);
}

void printTreeStructure(const vector<vector<string>>& treeStructure) {
    for (const auto& node : treeStructure) {
        cout << "Node: " << setw(3) << node[0] 
             << " | Left: " << setw(3) << node[1] 
             << " | Right: " << setw(3) << node[2] << endl;
    }
}

int main() {
    int n;
    cout << "Enter the number of keys: ";
    cin >> n;

    vector<int> keys(n);
    vector<int> prob(n);

    cout << "Enter the sorted keys: ";
    for (int i = 0; i < n; ++i) {
        cin >> keys[i];
    }

    cout << "Enter the probabilities: ";
    for (int i = 0; i < n; ++i) {
        cin >> prob[i];
    }

    vector<vector<int>> root(n, vector<int>(n, 0));

    int minCost = optimalBST(keys, prob, n, root);
    cout << "Minimum cost to construct the optimal BST: " << minCost << endl;

    vector<vector<string>> treeStructure;
    printBSTBox(keys, root, 0, n - 1, treeStructure);

    cout << "\nOptimal Binary Search Tree Structure (NODE | LEFT CHILD | RIGHT CHILD):\n";
    printTreeStructure(treeStructure);

    return 0;
}
