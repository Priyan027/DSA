#include <iostream>
#include <cstring>
#include <vector>
#include <algorithm>
using namespace std;

class Node {
public:
    string key, meaning;
    Node* left;
    Node* right;
    int height;

    Node(string k, string m) {
        key = k;
        meaning = m;
        left = right = nullptr;
        height = 1;
    }
};

class AVLTree {
    Node* root;

    int getHeight(Node* n) {
        return n ? n->height : 0;
    }

    int getBalance(Node* n) {
        return n ? getHeight(n->left) - getHeight(n->right) : 0;
    }

    Node* rightRotate(Node* y) {
        Node* x = y->left;
        Node* T2 = x->right;

        x->right = y;
        y->left = T2;

        y->height = max(getHeight(y->left), getHeight(y->right)) + 1;
        x->height = max(getHeight(x->left), getHeight(x->right)) + 1;

        return x;
    }

    Node* leftRotate(Node* x) {
        Node* y = x->right;
        Node* T2 = y->left;

        y->left = x;
        x->right = T2;

        x->height = max(getHeight(x->left), getHeight(x->right)) + 1;
        y->height = max(getHeight(y->left), getHeight(y->right)) + 1;

        return y;
    }

    Node* insert(Node* node, string key, string meaning) {
        if (!node)
            return new Node(key, meaning);

        if (key < node->key)
            node->left = insert(node->left, key, meaning);
        else if (key > node->key)
            node->right = insert(node->right, key, meaning);
        else {
            cout << "Duplicate key not allowed.\n";
            return node;
        }

        node->height = 1 + max(getHeight(node->left), getHeight(node->right));
        int balance = getBalance(node);

        if (balance > 1 && key < node->left->key)
            return rightRotate(node);
        if (balance < -1 && key > node->right->key)
            return leftRotate(node);
        if (balance > 1 && key > node->left->key) {
            node->left = leftRotate(node->left);
            return rightRotate(node);
        }
        if (balance < -1 && key < node->right->key) {
            node->right = rightRotate(node->right);
            return leftRotate(node);
        }

        return node;
    }

    Node* minValueNode(Node* node) {
        Node* current = node;
        while (current && current->left)
            current = current->left;
        return current;
    }

    Node* deleteNode(Node* root, string key) {
        if (!root)
            return root;

        if (key < root->key)
            root->left = deleteNode(root->left, key);
        else if (key > root->key)
            root->right = deleteNode(root->right, key);
        else {
            if (!root->left || !root->right) {
                Node* temp = root->left ? root->left : root->right;
                if (!temp) {
                    temp = root;
                    root = nullptr;
                } else
                    *root = *temp;
                delete temp;
            } else {
                Node* temp = minValueNode(root->right);
                root->key = temp->key;
                root->meaning = temp->meaning;
                root->right = deleteNode(root->right, temp->key);
            }
        }

        if (!root)
            return root;

        root->height = 1 + max(getHeight(root->left), getHeight(root->right));
        int balance = getBalance(root);

        if (balance > 1 && getBalance(root->left) >= 0)
            return rightRotate(root);
        if (balance > 1 && getBalance(root->left) < 0) {
            root->left = leftRotate(root->left);
            return rightRotate(root);
        }
        if (balance < -1 && getBalance(root->right) <= 0)
            return leftRotate(root);
        if (balance < -1 && getBalance(root->right) > 0) {
            root->right = rightRotate(root->right);
            return leftRotate(root);
        }

        return root;
    }

    void inorder(Node* root, vector<pair<string, string>>& vec) {
        if (root) {
            inorder(root->left, vec);
            vec.push_back({root->key, root->meaning});
            inorder(root->right, vec);
        }
    }

    void reverseInorder(Node* root, vector<pair<string, string>>& vec) {
        if (root) {
            reverseInorder(root->right, vec);
            vec.push_back({root->key, root->meaning});
            reverseInorder(root->left, vec);
        }
    }

public:
    AVLTree() { root = nullptr; }

    void insert(string key, string meaning) {
        root = insert(root, key, meaning);
    }

    void deleteKey(string key) {
        root = deleteNode(root, key);
    }

    void displayAsc() {
        cout << "Ascending order (sorted by length of keys):\n";
        vector<pair<string, string>> vec;
        inorder(root, vec);
        
        // Sort by length of the key
        sort(vec.begin(), vec.end(), [](const pair<string, string>& a, const pair<string, string>& b) {
            return a.first.length() < b.first.length();
        });

        for (const auto& entry : vec) {
            cout << entry.first << " : " << entry.second << endl;
        }
    }

    void displayDesc() {
        cout << "Descending order (sorted by length of keys):\n";
        vector<pair<string, string>> vec;
        reverseInorder(root, vec);
        
        // Sort by length of the key
        sort(vec.begin(), vec.end(), [](const pair<string, string>& a, const pair<string, string>& b) {
            return a.first.length() > b.first.length();
        });

        for (const auto& entry : vec) {
            cout << entry.first << " : " << entry.second << endl;
        }
    }

    int maxComparisons() {
        int maxComp = 0;
        maxComparisonsUtil(root, maxComp, 0);
        return maxComp;
    }

    void maxComparisonsUtil(Node* node, int& maxComp, int depth) {
        if (node == nullptr)
            return;
        if (depth > maxComp)
            maxComp = depth;
        maxComparisonsUtil(node->left, maxComp, depth + 1);
        maxComparisonsUtil(node->right, maxComp, depth + 1);
    }
};

int main() {
    AVLTree dict;
    int choice;
    string word, meaning;

    do {
        cout << "\n--- Dictionary Menu ---\n";
        cout << "1. Add keyword\n2. Delete keyword\n3. Update meaning\n4. Display Ascending\n";
        cout << "5. Display Descending\n6. Search keyword\n7.Maximum Comparisons\n8. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter keyword: ";
                cin >> word;
                cout << "Enter meaning: ";
                cin.ignore();  // Ensure that any leftover newline character is discarded
                getline(cin, meaning);  // Correct handling of input for the meaning
                dict.insert(word, meaning);
                break;
            case 2:
                cout << "Enter keyword to delete: ";
                cin >> word;
                dict.deleteKey(word);
                break;
            case 4:
                dict.displayAsc();
                break;
            case 5:
                dict.displayDesc();
                break;
                
            case 7:
                cout << "Max comparisons (maximum depth of the tree): " << dict.maxComparisons() << endl;
                break;

            case 8:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice.\n";
        }
    } while (choice != 8);

    return 0;
}
