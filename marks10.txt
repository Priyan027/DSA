#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// Function to maintain max-heap property
void maxHeapify(vector<int>& arr, int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest])
        largest = left;
    if (right < n && arr[right] > arr[largest])
        largest = right;

    if (largest != i) {
        swap(arr[i], arr[largest]);
        maxHeapify(arr, n, largest);
    }
}

// Function to maintain min-heap property
void minHeapify(vector<int>& arr, int n, int i) {
    int smallest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] < arr[smallest])
        smallest = left;
    if (right < n && arr[right] < arr[smallest])
        smallest = right;

    if (smallest != i) {
        swap(arr[i], arr[smallest]);
        minHeapify(arr, n, smallest);
    }
}

int main() {
    int n;
    cout << "Enter number of students: ";
    cin >> n;

    if (n <= 0) {
        cout << "Invalid number of students!" << endl;
        return 1;
    }

    vector<int> marks(n);
    cout << "Enter marks of " << n << " students one by one:\n";
    for (int i = 0; i < n; ++i) {
        cout << "Student " << i + 1 << ": ";
        cin >> marks[i];
    }

    // Create and heapify max heap
    vector<int> maxHeap = marks;
    for (int i = n / 2 - 1; i >= 0; --i)
        maxHeapify(maxHeap, n, i);
    int maxMarks = maxHeap[0];

    // Create and heapify min heap
    vector<int> minHeap = marks;
    for (int i = n / 2 - 1; i >= 0; --i)
        minHeapify(minHeap, n, i);
    int minMarks = minHeap[0];

    cout << "\nMaximum marks: " << maxMarks << endl;
    cout << "Minimum marks: " << minMarks << endl;

    return 0;
}